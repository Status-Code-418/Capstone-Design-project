□ Command Injection (커맨드 인젝션, 명령어 삽입)
=> 취약한 애플리케이션을 실행 중인 서버에 임의의 운영체제 명령을 실행시키는 공격이다.

□ SQL Injection (SQL 인젝션, SQL 삽입)
=> 응용 프로그램 보안상의 허점을 의도적으로 이용해, 악의적인 SQL 문을 실행되게 함으로써 데이터베이스를 비정상적으로 조작하는 코드 인젝션(삽입) 공격이다.

□ Directory Indexing (디렉터리 인덱싱) | Directory Listing (디렉터리 리스팅) 취약점
=> 웹 애플리케이션을 사용하고 있는 서버의 미흡한 설정으로 인해, 인덱싱 기능이 활성화 되어 있을 경우 발생하며, 브라우저를 통해 특정 디렉터리 내 파일 리스트를 노출하여 응용 시스템의 구조를 외부에 허용할 수 있고, 
   민감한 정보가 포함된 설정 파일 등이 노출될 경우 보안상 심각한 위험을 초래할 수 있는 취약점이다.

□ Brute force attack (브루트 포스 공격, 무차별 대입 공격)
=> 특정한 암호를 풀기 위해 가능한 모든 값을 조합하여 대입하는 공격이다.

□ Dictionary attack (딕셔너리 공격, 사전 공격)
=> 다수의 사람들이 자주 사용하는 암호나 단어들을 사전에 저장하고, 특정한 암호를 풀기 위해 사전에 있는 모든 단어를 입력하여 대입하는 공격이다.

□ Path Traversal (Directory traversal)
=> 공격자가 응용 프로그램을 실행 중인 서버에서 임의의 파일을 읽을 수 있도록 허용하는 웹 보안 취약점이다. 
=> Directory traversal 공격을 통해 애플리케이션 코드 및 데이터, 백앤드 시스템의 자격 증명 및 중요한 파일을 읽거나 접근할 수 있다. 

□ XSS (Cross Site Scripting, 크로스 사이트 스크립팅)
=> 공격자가 웹 애플리케이션을 활용하여, 악성 스크립트가 사용자 측에서 응답 및 실행하도록 하는 공격이다.
=> XSS 공격의 종류로는 Stored XSS, Reflected XSS, DOM Based XSS가 있다.

□ CSRF
=> 인증된 사용자가 자신의 의지와는 무관하게 웹 애플리케이션에 공격자가 의도한 특정 요청을 보내도록 유도하는 공격이다.

□ SSRF
=> 서버 측에서 위조된 HTTP 요청을 발생시켜 직접적인 접근이 제한된 서버 내부 자원에 접근하여 외부로 데이터 유출 및 오동작을 유발하는 공격이다.

##############################################################################################################################################################################################################################

□ Format String Attack
=> 

□ NoSQL Injection
=> 

□ Log Injection / Log Poisoning
=> 

□ JSON/XML Injection
=> 
